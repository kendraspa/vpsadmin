require 'lib/console'

require 'rubygems'
require 'eventmachine'
require 'json'
require 'lib/task'

class SchedulerServer < EventMachine::Connection
  def initialize(scheduler)
    @scheduler = scheduler
  end

  def receive_data(data)
    data.split('\n').each do |id|
      @scheduler.execute(id.to_i)
    end
  end
end

class Scheduler
  def self.run(d)
    new(d)
  end

  def initialize(daemon)
    @daemon = daemon
    @actions = {}
    @queue = Queue.new
    @gen_mutex = Mutex.new
    @gen_cond = ConditionVariable.new
    @action_mutex = Mutex.new

    @watcher = Thread.new do
      watcher
    end

    @executor = Thread.new do
      work
    end

    @em = Thread.new do
      EventMachine.run do
        EventMachine.start_unix_domain_server($CFG.get(:scheduler, :socket), SchedulerServer, self)
      end
    end
  end

  def schedule_changed
    @gen_mutex.synchronize do
      @gen_cond.signal
    end
  end

  def execute(id)
    @queue << id
  end

  private
  def watcher
    generate

    loop do
      @gen_mutex.synchronize do
        @gen_cond.wait(@gen_mutex)

        generate
      end
    end
  end

  def generate
    db = Db.new
    crontab = File.open($CFG.get(:scheduler, :crontab), 'w')
    crontab.write("# This file is generated by vpsAdmind, all changes will be lost\n\n")

    @action_mutex.synchronize do
      db.query('SELECT * FROM repeatable_tasks ORDER BY id').each_hash do |row|
        id = row['id'].to_i

        @actions[id] = {
            :class_name => row['class_name'],
            :params => db.query(Tasks.const_get(row['class_name']).query_params(row)).fetch_hash
        }

        crontab.write(
            "#{row['minute']} #{row['hour']} #{row['day_of_month']} #{row['month']} #{row['day_of_week']} " +
                "root #{$CFG.get(:vpsadmin, :root)}/bin/vpsadmind-run-action #{$CFG.get(:scheduler, :socket)} #{id}\n"
        )
      end
    end

    crontab.close
    db.close
  end

  def work
    db = Db.new

    loop do
      id = @queue.pop

      @action_mutex.synchronize do
        action = @actions[id]

        next unless action

        t = Tasks.const_get(action[:class_name]).new(db, action[:params])
        t.execute
      end
    end
  end
end
